[33mcommit 123432eaf4d720c64576b67c724db7deadf7f11c[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmaster[m[33m)[m
    v3

[1mdiff --git a/tokenizing.c b/tokenizing.c[m
[1mnew file mode 100644[m
[1mindex 0000000..44566ca[m
[1m--- /dev/null[m
[1m+++ b/tokenizing.c[m
[36m@@ -0,0 +1,89 @@[m
[32m+[m[32m#define _CRT_SECURE_NO_WARNINGS[m
[32m+[m[32m#define BUFFER_SIZE 300[m
[32m+[m[32m#include "tokenizing.h"[m
[32m+[m[32m#include <stdio.h>[m
[32m+[m
[32m+[m[32mvoid tokenizing(void) {[m
[32m+[m[32m    /* Version 1 */[m
[32m+[m[32m    printf("*** Start of Tokenizing Words Demo ***\n");//output to user[m
[32m+[m
[32m+[m[32m    // Initialize variables[m
[32m+[m[32m    char words[BUFFER_SIZE]; // Buffer to store user input[m
[32m+[m[32m    char* nextWord = NULL; // Pointer for tokenization[m
[32m+[m[32m    int wordsCounter; // Counter for words[m
[32m+[m
[32m+[m[32m    // do-while loop for tokenizing words[m
[32m+[m[32m    do {[m
[32m+[m[32m        printf("Type a few words separated by space (q - to quit):\n"); //output to user[m
[32m+[m[32m        fgets(words, BUFFER_SIZE, stdin); // Get input from user[m
[32m+[m[32m        words[strlen(words) - 1] = '\0'; // Remove the newline character at the end[m
[32m+[m
[32m+[m[32m        if (strcmp(words, "q") != 0) { // Check if input is not 'q' to continue[m
[32m+[m[32m            nextWord = strtok(words, " "); // Tokenize the input by spaces[m
[32m+[m[32m            wordsCounter = 1; // Initialize word counter[m
[32m+[m
[32m+[m[32m            // Tokenization loop[m
[32m+[m[32m            while (nextWord) {[m[41m [m
[32m+[m[32m                printf("Word #%d is \'%s\'\n", wordsCounter++, nextWord); // Display each word and its number[m
[32m+[m[32m                nextWord = strtok(NULL, " "); // Get the next token[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    } while (strcmp(words, "q") != 0); // Continue the loop until input is 'q'[m
[32m+[m
[32m+[m[32m    printf("*** End of Tokenizing Words Demo ***\n\n"); //output to user[m
[32m+[m
[32m+[m
[32m+[m[32m/* Version 2 */[m
[32m+[m[32m    printf("*** Start of Tokenizing Phrases Demo ***\n"); //output to user[m
[32m+[m
[32m+[m[32m    char phrases[BUFFER_SIZE]; // Buffer to store input phrases[m
[32m+[m[32m    char* nextPhrase = NULL; // Pointer to the next tokenized phrase[m
[32m+[m[32m    int phrasesCounter; // Counter for number of phrases entered[m
[32m+[m
[32m+[m[32m    do {[m
[32m+[m[32m        printf("Type a few phrases separated by comma (q - to quit):\n"); //output to user[m
[32m+[m[32m        fgets(phrases, BUFFER_SIZE, stdin); // Read input phrases from the user[m
[32m+[m[32m        phrases[strlen(phrases) - 1] = '\0'; // Remove the newline character at the end[m
[32m+[m
[32m+[m[32m        if ((strcmp(phrases, "q") != 0)) { // Check if the user would like to quit[m
[32m+[m
[32m+[m[32m            // Tokenizing the input phrases using strtok() function[m
[32m+[m[32m            nextPhrase = strtok(phrases, ","); // Tokenize the first phrase[m
[32m+[m[32m            phrasesCounter = 1; // Initialize the phrases counter[m
[32m+[m
[32m+[m[32m            // Loop through the tokenized phrases[m
[32m+[m[32m            while (nextPhrase != NULL) {[m
[32m+[m[32m                printf("Phrase #%d is \'%s\'\n", phrasesCounter++, nextPhrase); // Print the current phrase[m
[32m+[m[32m                nextPhrase = strtok(NULL, ","); // Get the next tokenized phrase[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    } while (strcmp(phrases, "q") != 0); // Continue the loop until the user enters 'q' to quit[m
[32m+[m
[32m+[m[32m    printf("*** End of Tokenizing Phrases Demo ***\n\n"); //output to user[m
[32m+[m
[32m+[m[32m/* Version 3 */[m
[32m+[m[32m    printf("*** Start of Tokenizing Sentences Demo ***\n"); // output start message to user[m
[32m+[m
[32m+[m[32m    char sentences[BUFFER_SIZE]; // Declare an array to store input sentences to the size of BUFFER_SIZE[m
[32m+[m[32m    char* nextSentence = NULL; // Declare a pointer to store the next token[m
[32m+[m[32m    int sentencesCounter; // Declare a variable to count sentences[m
[32m+[m
[32m+[m[32m    do { // Start a do-while loop to receive input until 'q' is entered[m
[32m+[m[32m        printf("Type a few sentences separated by dot(q - to quit):\n"); // ask user to input a few sentences[m
[32m+[m[32m        fgets(sentences, BUFFER_SIZE, stdin); // Read input from the user[m
[32m+[m[32m        sentences[strlen(sentences) - 1] = '\0'; // Remove the newline character[m
[32m+[m
[32m+[m[32m        if ((strcmp(sentences, "q") != 0)) { // if the input is not "q"[m
[32m+[m[32m            nextSentence = strtok(sentences, "."); // Tokenize input sentences using '.' as a delimiter[m
[32m+[m[32m            sentencesCounter = 1; // declare sentence counter to 1[m
[32m+[m
[32m+[m[32m            while (nextSentence != NULL) { // Loop through each tokenized sentence[m
[32m+[m[32m                printf("Sentence #%d is \'%s\'\n", sentencesCounter++, nextSentence); // Print the sentence and its count[m
[32m+[m[32m                nextSentence = strtok(NULL, "."); // Get the next tokenized sentence[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    } while (strcmp(sentences, "q") != 0); // continue loop until user enters "q"[m
[32m+[m
[32m+[m[32m    printf("*** End of Tokenizing Sentences Demo ***\n\n"); // output end message to user[m
[32m+[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/tokenizing.h b/tokenizing.h[m
[1mnew file mode 100644[m
[1mindex 0000000..2f11f32[m
[1m--- /dev/null[m
[1m+++ b/tokenizing.h[m
[36m@@ -0,0 +1,6 @@[m
[32m+[m[32m#ifndef _TOKENIZING_H_[m
[32m+[m[32m#define _TOKENIZING_H_[m
[32m+[m[32m#include <stdio.h>[m
[32m+[m[32m#include <string.h>[m
[32m+[m[32mvoid tokenizing(void);[m
[32m+[m[32m#endif[m
